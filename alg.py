import telebot
import sqlite3
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = "7221205358:AAEzSNTzm7dUvis2WCqkplUwLxlc6TDjek8"
bot = telebot.TeleBot(TOKEN)

days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]

user_ids = set()
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—á–µ—Ç–Ω–∞—è/–Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è)
current_db = "ch.db"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏
def get_schedule_by_day(day):
    table_names = {
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "–í—Ç–æ—Ä–Ω–∏–∫": "–í—Ç–æ—Ä–Ω–∏–∫",
        "–°—Ä–µ–¥–∞": "–°—Ä–µ–¥–∞",
        "–ß–µ—Ç–≤–µ—Ä–≥": "–ß–µ—Ç–≤–µ—Ä–≥",
        "–ü—è—Ç–Ω–∏—Ü–∞": "–ü—è—Ç–Ω–∏—Ü–∞"
    }
    table_name = table_names.get(day)

    if not table_name:
        return "–û—à–∏–±–∫–∞: –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    try:
        conn = sqlite3.connect(current_db)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ç–µ–∫—É—â–µ–π –±–∞–∑–µ
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
        cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table_name}';")
        if not cursor.fetchone():
            conn.close()
            return f"–û—à–∏–±–∫–∞: –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ."

        cursor.execute(f"SELECT * FROM {table_name}")  # –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        rows = cursor.fetchall()
        conn.close()

        if not rows:
            return "–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        schedule = []
        for row in rows:
            if any(field not in ["-", None, ""] for field in row[1:]):
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–æ–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞–±–ª–∏—Ü–µ
                pair_number = row[0]  # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - –Ω–æ–º–µ—Ä –ø–∞—Ä—ã
                subject = row[1]  # –í—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã
                teacher = row[2]  # –¢—Ä–µ—Ç–∏–π —Å—Ç–æ–ª–±–µ—Ü - —É—á–∏—Ç–µ–ª—å
                classroom = row[3]  # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Å—Ç–æ–ª–±–µ—Ü - –∫–∞–±–∏–Ω–µ—Ç

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–æ–º–µ—Ä–æ–º –ø–∞—Ä—ã –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                schedule_entry = (
                    f"‚îå {pair_number} –ø–∞—Ä–∞\n"
                    f"‚îú {subject}\n"
                    f"‚îú {teacher}\n"
                    f"‚îî {classroom}\n"
                )
                schedule.append(schedule_entry)

        return f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}:\n\n" + "\n".join(schedule) if schedule else "–ü–∞—Ä –Ω–µ—Ç."

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.row(
        InlineKeyboardButton("–ß–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è", callback_data="even_week"),
        InlineKeyboardButton("–ù–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è", callback_data="odd_week")
    )
    return keyboard


# –ú–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
def days_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)  # –î–Ω–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ 2 –≤ —Ä—è–¥
    for day in days:
        keyboard.add(InlineKeyboardButton(day, callback_data=f"day_{day}"))
    keyboard.add(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back"))
    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:", reply_markup=main_menu())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏ (–º–µ–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
@bot.callback_query_handler(func=lambda call: call.data in ["even_week", "odd_week"])
def week_selected(call):
    global current_db
    if call.data == "even_week":
        current_db = "ch.db"  # –ß–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è
    else:
        current_db = "nech.db"  # –ù–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è

    try:
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", call.message.chat.id, call.message.message_id,
                              reply_markup=days_menu())
    except telebot.apihelper.ApiException:
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=days_menu())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("day_"))
def day_selected(call):
    day = call.data[4:]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è
    schedule = get_schedule_by_day(day)  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    bot.send_message(call.message.chat.id, schedule)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚¨Ö –ù–∞–∑–∞–¥"
@bot.callback_query_handler(func=lambda call: call.data == "back")
def go_back(call):
    try:
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:", call.message.chat.id, call.message.message_id, reply_markup=main_menu())
    except telebot.apihelper.ApiException:
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:", reply_markup=main_menu())



@bot.message_handler(commands=['cast'])
def send_broadcast(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID)
    if message.from_user.id == 1077090809:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
        bot.register_next_step_handler(message, broadcast_message)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
def broadcast_message(message):
    text = message.text
    for user_id in user_ids:
        try:
            bot.send_message(user_id, text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏
@bot.message_handler(func=lambda message: not message.text.startswith('/'))
def delete_non_command_messages(message):
    bot.delete_message(message.chat.id, message.message_id)

if __name__ == "__main__":
    print("Bot started...")
    bot.polling(none_stop=True)